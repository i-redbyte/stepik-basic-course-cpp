#include <cstddef>
#include <cstring>
#include <iostream>


/** В этой и последующих задачах мы создадим свой простой аналог стандартного класса string для удобной работы со строками.
 * Начнем мы с написания конструктора. В этой задаче вам требуется реализовать конструктор,
 * который принимает на вход C-style строку, вычисляет ее размер (без учета завершающего 0 символа)
 * и сохраняет его в поле size, кроме того, конструктор должен аллоцировать память достаточную для хранения копии
 * переданной строки (вместе с завершающим 0 символом), копирует переданную строку в выделенную память и сохраняет
 * указатель на начало этой области памяти в поле str. Т.е. в результате работы конструктора в поле str должен оказаться
 * указатель на C-строку c копией исходной строки, а в поле size — длина строки без учета завершающего нулевого символа.*/
struct String {

    String(const char *str = "") : size(strlen(str)) {
        this->str = new char[size + 1];
        strcpy(this->str, str);
    }
/** Конструкторов у структуры может быть несколько. Для строки может оказаться полезным заполняющий конструктор
 * (например, чтобы создать строку пробелов). Заполняющий конструктор принимает число и символ, и создает строку с
 * заданным количеством повторений переданного символа. Условия налагаемые на реализацию конструктора те же самые
 * (в поле size размер без учета завершающего 0 символа, в поле str C-style строка, т.е. с завершающим 0 символом).
 * Кроме конструктора в этой задаче вам нужно также реализовать и деструктор, который освободит выделенную память.*/
    /* Реализуйте этот конструктор */
    String(size_t n, char c) {
        if (n < 0) return;
        this->str = new char[n + 1];
        for (size_t i = 0; i < n; ++i) {
            this->str[i] = c;
        }
        this->str[n] = '\0';
        this->size = n;
    }

    /* и деструктор */
    ~String() {
        delete[] str;
    }

    size_t size;
    char *str;
};

int main() {
    String s("Lenin");
    std::cout << "Length = " << s.size << " for string: " << s.str << std::endl;
    String s1(5, '*');
    std::cout << "String for symbol: " << s1.str << std::endl;

    return 0;
}